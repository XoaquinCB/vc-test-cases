import XCTest

class SolutionTests: XCTestCase {
    
    func test_1() {
        let solution = Solution()
        XCTAssertEqual(solution.fixFuelConfig(config: "1:2;2:4;3.5:7;4:8"), "1:2;2:4;3.5:7;4:8")
    }
    
    func test_2() {
        let solution = Solution()
        XCTAssertEqual(solution.fixFuelConfig(config: "1:1;2:5;3:3;4:6"), "KEEP_PREVIOUS")
    }
    
    func test_3() {
        let solution = Solution()
        XCTAssertEqual(solution.fixFuelConfig(config: "1:1;1:2;3:3;4:4"), "KEEP_PREVIOUS")
    }
    
    func test_4() {
        let solution = Solution()
        XCTAssertEqual(solution.fixFuelConfig(config: "1:1;2:2;3.5:3.5;4:5"), "1:1;2:2;3.5:3.5;4:4")
    }
    
    func test_5() {
        let solution = Solution()
        XCTAssertEqual(solution.fixFuelConfig(config: "0:0;1:0;2:0;3:0"), "0:0;1:0;2:0;3:0")
    }
    
    func test_6() {
        let solution = Solution()
        XCTAssertEqual(solution.fixFuelConfig(config: "5:1;10:2;2.5:12.5;12.5:2.5"), "5:1;10:2;2.5:0.5;12.5:2.5")
    }
    
    func test_7() {
        let solution = Solution()
        XCTAssertEqual(solution.fixFuelConfig(config: "3:11;1:10;12.5:20.5;78:86"), "3:11;2:10;12.5:20.5;78:86")
    }
    
    func test_8() {
        let solution = Solution()
        XCTAssertEqual(solution.fixFuelConfig(config: "1:100;2:2;3.5:3.5;4:4"), "1:1;2:2;3.5:3.5;4:4")
    }
    
    func test_9() {
        let solution = Solution()
        XCTAssertEqual(solution.fixFuelConfig(config: "1:1;0:2;3.5:3.5;4:4"), "1:1;0:0;3.5:3.5;4:4")
    }
    
    func test_10() {
        let solution = Solution()
        XCTAssertEqual(solution.fixFuelConfig(config: "1:1;2:2;70:35;4:5"), "1:1;2:2;70:70;4:4")
    }
    
    func test_11() {
        let solution = Solution()
        XCTAssertEqual(solution.fixFuelConfig(config: "1:6;0.2:2;3.5:3.5;4:21"), "1:6;0.2:2;3.5:18.5;4:21")
    }
    
    func test_12() {
        let solution = Solution()
        XCTAssertEqual(solution.fixFuelConfig(config: "5:1;10:2;1:3.5;12.5:2.5"), "5:1;10:2;1:0.2;12.5:2.5")
    }

}

extension SolutionTests {
    static var allTests : [(String, (SolutionTests) -> () throws -> Void)] {
        return [
            
            ("test_1", test_1),
            
            ("test_2", test_2),
            
            ("test_3", test_3),
            
            ("test_4", test_4),
            
            ("test_5", test_5),
            
            ("test_6", test_6),
            
            ("test_7", test_7),
            
            ("test_8", test_8),
            
            ("test_9", test_9),
            
            ("test_10", test_10),
            
            ("test_11", test_11),
            
            ("test_12", test_12),
        ]
    }
}
